version: 2.1

parameters:
  min-rust-version:
    type: string
    default: "1.85"
  fingerprint:
    type: string
    default: SHA256:OkxsH8Z6Iim6WDJBaII9eTT9aaO1f3eDc6IpsgYYPVg
  validation-flag:
    type: boolean
    default: false
    description: "If true, the validation pipeline will be executed."
  success-flag:
    type: boolean
    default: false
    description: "If true, the success pipeline will be executed."
  release-flag:
    type: boolean
    default: false
    description: "If true, the release workflow will be executed."

orbs:
  toolkit: jerus-org/circleci-toolkit@2.12.1

executors:
  rust-env:
    docker:
      - image: jerusdp/ci-rust:<<pipeline.parameters.min-rust-version>>

commands:
  make_cargo_smart_release:
    description: |
      This makes a release using cargo release
    parameters:
      echo:
        default: false
        description: If true, the bash environment will be set to echo the commands
        type: boolean
      first_release:
        default: false
        description: |
          Request that a first release (v0.1.0) be created
        type: boolean
      no_push:
        default: false
        description: Whether or not cargo release should push the changes
        type: boolean
      package:
        default: ""
        description: Package to release and/or publish
        type: string
      publish:
        default: true
        description: If true, the release will be published.
        type: boolean
      specific_version:
        default: false
        description: >
          Make a specific release, if true version must be set to the specific
          version number
        type: boolean
      verbosity:
        default: "-vv"
        description: Verbosity for cargo release
        type: string
      version:
        default: ""
        description: |
          Specific version number to release
        type: string
    steps:
      - run:
          command: |
            if [ << parameters.echo >> == true ] ; then
              set -exo pipefail
            else
              set -eo pipefail
            fi

            bump=$(nextsv -q require -f CHANGELOG.md feature)

            if [ "$bump" == "" ]; then
              bump="bump"
            fi

            echo "Bump set to ${bump}"

            if [ "${bump}" == "none" ] ; then
              echo "No version to release"
            else 
              cargo smart-release \
                --execute \
                --update-crates-index \
                --dry-run-cargo-publish \
                --no-changelog \
                --allow-dirty \
                --bump $bump
            fi
          name: Find next level and make smart release

jobs:
  update_logs:
    description: |
      Update the changelog based on the pull request
    executor:
      name: rust-env
    parameters:
      blog_directory:
        default: content/blog
        description: The directory to use for the blog
        type: string
      bluesky:
        default: false
        description: Whether or not to run the bluesky command
        type: boolean
      bluesky_command:
        default: draft
        description: The command to run for bluesky
        enum:
          - draft
          - post
        type: enum
      gpg_key:
        default: BOT_GPG_KEY
        description: The base64 encoded GPG key
        type: env_var_name
      gpg_trust:
        default: BOT_TRUST
        description: The trust associated with the GPG key
        type: env_var_name
      install_me:
        default: false
        description: Install the current crate as a binary
        type: boolean
      install_me_path:
        default: .
        description: The path to the crate to install
        type: string
      label_option:
        default: false
        description: Apply a label to the oldest open PR created by the specified author
        type: boolean
      min_rust_version:
        description: The minimum version of the rust compiler to use
        type: string
      pcu_allow_no_pull_request:
        default: ""
        description: >-
          Optional flag to allows successful exit if no pull request in CI
          environment
        enum:
          - ""
          - "--allow-no-pull-request"
        type: enum
      pcu_allow_push_fail:
        default: ""
        description: Optional flag to allow the push to fail
        enum:
          - ""
          - "--allow-push-fail"
        type: enum
      pcu_author:
        default: ""
        description: Custom pull request author.
        type: string
      pcu_colour:
        default: ""
        description: Custom pull request colour.
        type: string
      pcu_desc:
        default: ""
        description: Custom pull request description.
        type: string
      pcu_halt_signal:
        default: halt
        description: The verbosity of the pcu command
        type: string
      pcu_label:
        default: ""
        description: Custom pull request label.
        type: string
      pcu_push:
        default: true
        description: Optional flag to push the commit to the remote repository
        type: boolean
      pcu_verbosity:
        default: "-vv"
        description: The verbosity of the pcu command
        type: string
      remove_ssh_key:
        default: true
        description: Remove the original SSH key from the agent
        type: boolean
      sign_key:
        default: BOT_SIGN_KEY
        description: The GPG key id associated with the GPG key
        type: env_var_name
      ssh_fingerprint:
        description: |
          The fingerprint of the ssh key to use
        type: string
      update_log_option:
        default: pipeline
        description: >-
          The option to halt or continue with new pipeline when a change log does
          not need to be updated
        enum:
          - halt
          - pipeline
        type: enum
      update_pcu:
        default: false
        description: Update pcu to the latest code from the git repo
        type: boolean
      user_email:
        default: BOT_USER_EMAIL
        description: The user email associated with the GPG key
        type: env_var_name
      user_name:
        default: BOT_USER_NAME
        description: The user name associated with the GPG key
        type: env_var_name
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - when:
          condition: << parameters.remove_ssh_key >>
          steps:
            - run:
                command: |
                  ssh-add -l
                  ssh-add -d ~/.ssh/id_rsa.pub
                  ssh-add -l
                name: Remove original SSH key from agent
      - toolkit/gpg_key
      - toolkit/git_config
      - when:
          condition: << parameters.update_pcu >>
          name: Install pcu from main branch on GitHub
          steps:
            - toolkit/install_latest_pcu
      - when:
          condition: << parameters.install_me >>
          name: Install pcu from main branch on GitHub
          steps:
            - toolkit/install_me:
                path_to_crate: << parameters.install_me_path >>
      - run:
          command: |
            pcu --version
          name: pcu version
      - when:
          condition: << parameters.bluesky >>
          steps:
            - toolkit/bsky:
                blog_directory: << parameters.blog_directory >>
                command: << parameters.bluesky_command >>
                pcu_verbosity: << parameters.pcu_verbosity >>
      - run:
          name: remake change log
          command: |
            set -ex

            ls -l *LOG.md
            gen-changelog
            ls -l *LOG.md
      - when:
          condition:
            equal:
              - halt
              - << parameters.update_log_option >>
          steps:
            - toolkit/update_log:
                pcu_allow_no_pull_request: <<parameters.pcu_allow_no_pull_request>>
                pcu_allow_push_fail: <<parameters.pcu_allow_push_fail>>
                pcu_halt_signal: <<parameters.pcu_halt_signal>>
                pcu_verbosity: <<parameters.pcu_verbosity>>

      - when:
          condition:
            equal:
              - true
              - << parameters.label_option >>
          steps:
            - toolkit/label_pr:
                pcu_author: <<parameters.pcu_author>>
                pcu_colour: <<parameters.pcu_colour>>
                pcu_desc: <<parameters.pcu_desc>>
                pcu_label: <<parameters.pcu_label>>
                pcu_verbosity: <<parameters.pcu_verbosity>>
      - when:
          condition:
            equal:
              - pipeline
              - << parameters.update_log_option >>
          steps:
            - toolkit/pipeline_pcu_check:
                pcu_halt_signal: <<parameters.pcu_halt_signal>>
                pcu_push: <<parameters.pcu_push>>
                pcu_verbosity: <<parameters.pcu_verbosity>>
      - when:
          condition:
            not: << parameters.pcu_push >>
          steps:
            - run:
                command: |
                  set -ex

                  mkdir -p /tmp/workspace
                  cp PRLOG.md /tmp/workspace/PRLOG.md
                  cp CHANGELOG.md /tmp/workspace/CHANGELOG.md
                name: Save PRLOG.md and CHANGELOG.md to workspace
            - persist_to_workspace:
                paths:
                  - PRLOG.md
                  - CHANGELOG.md
                root: /tmp/workspace

  build_commit_and_push:
    description: |
      Build the software and push updates to the remote repository.
    executor: rust-env
    parameters:
      changelog_updated:
        default: false
        description: Flag to expected updated changelog in workspace
        type: boolean
      install_me:
        default: false
        description: Install the current crate as a binary
        type: boolean
      install_me_path:
        default: .
        description: The path to the crate to install
        type: string
      min_rust_version:
        description: The minimum version of the rust compiler to use
        type: string
      pcu_commit_message:
        default: "chore: test push"
        description: The commit message to use for the pcu test push
        type: string
      pcu_no_push:
        default: false
        description: Whether or not prevent final push of commit
        type: boolean
      pcu_semver:
        default: false
        description: Whether or not to push a semver version
        type: boolean
      pcu_verbosity:
        default: "-vv"
        description: The verbosity of the pcu command
        type: string
      ssh_fingerprint:
        description: |
          The fingerprint of the ssh key to use
        type: string
      update_pcu:
        default: false
        description: Update pcu to the latest code from the git repo
        type: boolean
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh_fingerprint>>
      - run:
          command: |
            ssh-add -l
            ssh-add -d ~/.ssh/id_rsa.pub
            ssh-add -l
          name: Remove original SSH key from agent
      - toolkit/gpg_key
      - toolkit/git_config
      - when:
          condition: << parameters.update_pcu >>
          steps:
            - toolkit/install_latest_pcu
      - when:
          condition: << parameters.install_me >>
          name: Install pcu from main branch on GitHub
          steps:
            - toolkit/install_me:
                path_to_crate: << parameters.install_me_path >>
      - when:
          condition: << parameters.changelog_updated >>
          steps:
            - run:
                command: |
                  set -ex

                  mkdir -p /tmp/workspace
                name: Create workspace in tmp
            - attach_workspace:
                at: /tmp/workspace
            - run:
                command: |
                  set -ex

                  ls /tmp/workspace
                  cp /tmp/workspace/CHANGELOG.md .
                  cp /tmp/workspace/PRLOG.md .
                name: Copy logs from workspace to current directory
      - run:
          command: |
            pcu --version
          name: pcu version
      - toolkit/commit_cmd:
          pcu_commit_message: << parameters.pcu_commit_message >>
          pcu_semver: << parameters.pcu_semver >>
          pcu_verbosity: << parameters.pcu_verbosity >>
      - toolkit/push_cmd:
          pcu_no_push: << parameters.pcu_no_push >>
          pcu_semver: << parameters.pcu_semver >>
          pcu_verbosity: << parameters.pcu_verbosity >>

  make_smart_release:
    description: |
      Assess the level using nextsv and make a release using cargo release
    executor:
      name: rust-env
    parameters:
      blog_directory:
        default: content/blog
        description: The directory to use for the blog
        type: string
      bluesky_command:
        default: draft
        description: The command to run for bluesky
        enum:
          - draft
          - post
        type: enum
      echo:
        default: false
        description: If true, the bash environment will be set to echo the commands
        type: boolean
      first_release:
        default: false
        description: |
          Request that a first release (v0.1.0) be created
        type: boolean
      min_rust_version:
        type: string
      package:
        default: ""
        description: The package to publish
        type: string
      pcu_commit_message:
        default: "chore: test push"
        description: The commit message to use for the pcu test push
        type: string
      pcu_no_push:
        default: false
        description: Whether or not prevent final push of commit
        type: boolean
      pcu_prefix:
        default: v
        description: The verbosity of the pcu command
        type: string
      pcu_semver:
        default: false
        description: Whether or not set the semver version flag
        type: boolean
      pcu_update_changelog:
        default: false
        description: To update the changelog when making the github release
        type: boolean
      pcu_verbosity:
        default: "-vv"
        description: The verbosity of the pcu command
        type: string
      pcu_workspace:
        default: false
        description: Whether or not to set the workspace flag of the pcu command
        type: boolean
      publish:
        default: true
        description: |
          Publish the release
        type: boolean
      remove_ssh_key:
        default: true
        description: Remove the original SSH key from the agent
        type: boolean
      specific_version:
        default: false
        description: >
          Make a specific release, if true version must be set to the specific
          version number
        type: boolean
      ssh_fingerprint:
        type: string
      verbosity:
        default: "-vv"
        description: Verbosity for cargo release
        type: string
      version:
        default: ""
        description: |
          Specific version number to release
        type: string
      when_bluesky:
        default: false
        description: Whether or not to run the bluesky command
        type: boolean
      when_get_version:
        default: true
        description: Get the next version number
        type: boolean
      when_pcu_push:
        default: false
        description: To use the pcu push command
        type: boolean
      when_update_pcu:
        default: false
        description: |
          Update pcu to the latest version based on the main branch on Github
        type: boolean
      when_use_workspace:
        default: false
        description: Get version from the workspace
        type: boolean
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << parameters.ssh_fingerprint >>
      - when:
          condition: << parameters.remove_ssh_key >>
          steps:
            - run:
                command: |
                  ssh-add -l
                  ssh-add -d ~/.ssh/id_rsa.pub
                  ssh-add -l
                name: Remove original SSH key from agent
      - toolkit/gpg_key
      - toolkit/git_config
      - when:
          condition: << parameters.when_use_workspace >>
          steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                command: |
                  semver=$(cat /tmp/workspace/next-version)
                  echo "export SEMVER=$semver" >> "$BASH_ENV"
                name: Get version and set SEMVER in bash environment
      - when:
          condition:
            and:
              - not: << parameters.when_use_workspace >>
              - << parameters.when_get_version >>
          steps:
            - toolkit/get_next_version:
                package: << parameters.package >>
                verbosity: << parameters.pcu_verbosity >>
                version: << parameters.version >>
            - run:
                command: |
                  semver=$NEXT_VERSION
                  echo "export SEMVER=$semver" >> "$BASH_ENV"
                name: Set SEMVER in bash environment
      - when:
          condition: << parameters.when_update_pcu >>
          steps:
            - toolkit/install_latest_pcu
      - when:
          condition:
            and:
              - not: << parameters.when_pcu_push >>
          steps:
            - make_cargo_smart_release:
                echo: << parameters.echo >>
                package: << parameters.package >>
                publish: << parameters.publish >>
                specific_version: << parameters.specific_version >>
                verbosity: << parameters.verbosity >>
                version: << parameters.version >>
      - when:
          condition:
            and:
              - << parameters.when_pcu_push >>
          steps:
            - make_cargo_smart_release:
                echo: << parameters.echo >>
                no_push: true
                package: << parameters.package >>
                publish: << parameters.publish >>
                specific_version: << parameters.specific_version >>
                verbosity: << parameters.verbosity >>
                version: << parameters.version >>
      - when:
          condition: << parameters.when_pcu_push >>
          steps:
            - toolkit/push_cmd:
                pcu_no_push: << parameters.pcu_no_push >>
                pcu_semver: << parameters.pcu_semver >>
                pcu_verbosity: << parameters.pcu_verbosity >>
      - when:
          condition: << parameters.when_bluesky >>
          steps:
            - toolkit/bsky:
                blog_directory: << parameters.blog_directory >>
                command: << parameters.bluesky_command >>
                pcu_verbosity: << parameters.pcu_verbosity >>

workflows:
  check_last_commit:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.validation-flag >>

    jobs:
      - toolkit/choose_pipeline:
          name: choose pipeline based on committer
          context: bot-check

  validation:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.success-flag >>
        - << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>
    jobs:
      - toolkit/label:
          min_rust_version: << pipeline.parameters.min-rust-version >>
          context: pcu-app
          filters:
            branches:
              only:
                - main
      - toolkit/required_builds:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/optional_builds:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/test_doc_build:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/idiomatic_rust:
          min_rust_version: << pipeline.parameters.min-rust-version >>
      - toolkit/security:
          context: SonarCloud
      - update_logs:
          requires:
            - toolkit/required_builds
            - toolkit/test_doc_build
            - toolkit/idiomatic_rust
            - toolkit/security
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          update_pcu: true
          install_me: true
          pcu_push: false

      - build_commit_and_push:
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
          filters:
            branches:
              ignore:
                - main
          context:
            - release
            - bot-check
            - pcu-app
          requires:
            - update_logs
          pcu_verbosity: "-vvvv"
          changelog_updated: true
          pcu_commit_message: "chore: update pr and change logs and add generated files"
  on_success:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
        - not: << pipeline.parameters.release-flag >>

    jobs:
      - toolkit/end_success

  release:
    when:
      and:
        - or:
            - and:
                - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
                - equal: ["release check", << pipeline.schedule.name >>]
            - << pipeline.parameters.release-flag >>
        - not: << pipeline.parameters.success-flag >>
        - not: << pipeline.parameters.validation-flag >>
    jobs:
      - make_smart_release:
          context:
            - release
            - bot-check
          ssh_fingerprint: << pipeline.parameters.fingerprint >>
          min_rust_version: << pipeline.parameters.min-rust-version >>
